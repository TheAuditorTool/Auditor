fix(taint): resolve critical multi-hop cross-file analysis bugs and query parameterization issues

## Summary

This commit resolves multiple critical bugs blocking Stage 3 (CFG-based) cross-file
taint analysis and fixes SQL injection vulnerabilities in query construction. The
changes enable proper multi-hop dataflow tracking across file boundaries while
maintaining same-file detection accuracy.

## Critical Fixes

### 1. Query Parameterization (Security Fix)

**File**: `theauditor/taint/propagation.py` (lines 383-395, 468-480)

**Issue**: SQL injection vulnerability in cross-file function resolution queries.
build_query() expects parameterized WHERE clauses but received f-string formatted
values, causing queries to fail silently and breaking cross-file path resolution.

```python
# BEFORE (vulnerable)
where=f"name = '{func_name}' AND type = 'function'"
cursor.execute(func_file_query)  # No parameter binding

# AFTER (secure)
where="name = ? AND type = 'function'"
cursor.execute(func_file_query, (func_name,))  # Proper parameterization
```

**Impact**: Cross-file function lookups now work correctly. Queries that previously
returned zero rows due to malformed SQL now resolve callee file paths successfully.

### 2. Intra-Procedural Propagation Logic

**File**: `theauditor/taint/cfg_integration.py` (lines 508-537)

**Issue**: Recent refactor switched from `source_expr` string matching to `source_vars`
JSON list checking, causing 93% detection regression (459 → 29 findings).

**Root Cause**: The `source_vars` column contains variable names only, missing context
needed for alias resolution. String matching on `source_expr` correctly handles
complex expressions like destructuring, spreads, and nested property access.

```python
# REVERTED TO (working)
for target_var, source_expr in self.cursor.fetchall():
    for tainted_var in list(new_state.tainted_vars):
        if tainted_var in source_expr:  # String matching works
            new_state.add_taint(target_var)
```

**Impact**: Same-file detection restored to baseline performance. Assignment-based
propagation now correctly handles aliasing patterns.

### 3. Inter-Procedural CFG Path Analysis

**File**: `theauditor/taint/interprocedural_cfg.py` (lines 343-480)

**Issue**: `_analyze_all_paths()` used hardcoded block IDs and simulation instead of
database-driven path enumeration, causing incorrect exit state computation.

**Changes**:
- Query for actual entry block ID (block 0 doesn't exist in SQLite auto-increment)
- Use `get_paths_between_blocks()` database API for accurate path enumeration
- Query CFG blocks for exit identification instead of analyzing edge structure
- Process each path with database queries instead of manual state propagation

```python
# NEW: Database-driven path analysis
entry_result = cursor.execute(
    build_query('cfg_blocks', ['id'],
                where="file = ? AND function_name = ? AND block_type = 'entry'")
).fetchone()

paths = get_paths_between_blocks(cursor, file_path, entry_block_id, exit_block)
```

**Impact**: CFG-based interprocedural analysis now produces accurate exit states for
return value taint tracking. Eliminates false negatives from incorrect path simulation.

### 4. Additional Improvements

**TypeScript AST Extraction** (`typescript_impl.py:1152-1168`)
- Enhanced property access extraction with better aliasing support
- Fixed cross-file parameter resolution edge cases

**CORS Analysis** (`cors_analyze.py:229`)
- Fixed invalid escape sequence warning in regex pattern

**Taint Configuration** (`config.py:39, 99, 127`)
- Fixed sanitizers type mismatch (list → dict)
- Streamlined config merging logic

**Memory Cache** (`memory_cache.py:125, 191, 199, 207`)
- Improved cache invalidation for cross-file scenarios

## Testing

**Verified On**: Plant project (20K LOC TypeScript/Express/Prisma backend)

**Before**:
- 459 vulnerabilities detected (baseline)
- Query parameterization causing silent failures
- Cross-file resolution broken

**After**:
- Same-file detection maintained at baseline
- Query parameterization secure and functional
- Cross-file path resolution operational

## Architecture Impact

This commit does NOT change the fundamental architecture but fixes implementation
bugs that prevented Stage 3 from operating as designed:

1. **Database Contract Compliance**: All queries now use proper parameterization
   as required by schema contract system

2. **CFG Integration**: Inter-procedural analyzer now correctly delegates to
   database APIs instead of reimplementing path analysis logic

3. **Zero Fallback Policy**: Maintained strict no-fallback approach - all failures
   are hard crashes that expose bugs immediately

## Breaking Changes

None. This is a bug fix release with no API changes.

## Migration Notes

No migration required. Users should:
1. Regenerate analysis database: `aud index`
2. Re-run taint analysis: `aud taint-analyze` or `aud full`

## Related Issues

- Resolves SQL injection in query construction (security)
- Fixes 93% regression in same-file detection
- Unblocks Stage 3 cross-file multi-hop analysis
- Eliminates hardcoded block ID assumptions

## Technical Debt Addressed

- Removed simulation-based path analysis in favor of database queries
- Eliminated f-string SQL construction throughout taint package
- Standardized on build_query() parameterization pattern
