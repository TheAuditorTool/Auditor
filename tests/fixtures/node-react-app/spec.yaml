name: node_react_app
description: |
  React SPA fixture for testing React hooks, component extraction, tainted dependencies,
  and hook anti-patterns.

  Tests:
  - React component extraction with all hook types
  - react_component_hooks junction table (which hooks each component uses)
  - react_hook_dependencies junction table (dependency arrays)
  - Tainted dependencies (userId, searchTerm, filter from props)
  - Custom hooks (useAuth)
  - useContext extraction
  - Hook anti-patterns (useState + useEffect without useCallback)
  - Taint flows from props → useEffect → API calls
  - localStorage as taint source

verification_rules:
  - name: react_components_extracted
    description: Verify all React components are extracted
    query: |
      SELECT
        name,
        type,
        path,
        line
      FROM symbols
      WHERE path LIKE '%node-react-app%'
        AND (type = 'function' OR type = 'component')
        AND (
          name = 'UserProfile'
          OR name = 'ProductList'
          OR name = 'Dashboard'
          OR name = 'useAuth'
        )
      ORDER BY name
    expected_minimum: 4

  - name: react_hooks_all_types_extracted
    description: Verify all React hook types are extracted from components
    query: |
      SELECT DISTINCT
        hook_name,
        component_name,
        file
      FROM react_component_hooks
      WHERE file LIKE '%node-react-app%'
      ORDER BY component_name, hook_name
    expected_minimum: 15

  - name: usestate_hooks_extracted
    description: Verify useState hooks are extracted
    query: |
      SELECT
        component_name,
        hook_name,
        file,
        line
      FROM react_component_hooks
      WHERE file LIKE '%node-react-app%'
        AND hook_name = 'useState'
      ORDER BY component_name, line
    expected_minimum: 8

  - name: useeffect_hooks_extracted
    description: Verify useEffect hooks are extracted
    query: |
      SELECT
        component_name,
        hook_name,
        file,
        line
      FROM react_component_hooks
      WHERE file LIKE '%node-react-app%'
        AND hook_name = 'useEffect'
      ORDER BY component_name, line
    expected_minimum: 6

  - name: usecallback_hooks_extracted
    description: Verify useCallback hooks are extracted
    query: |
      SELECT
        component_name,
        hook_name,
        file,
        line
      FROM react_component_hooks
      WHERE file LIKE '%node-react-app%'
        AND hook_name = 'useCallback'
      ORDER BY component_name, line
    expected_minimum: 3

  - name: usememo_hooks_extracted
    description: Verify useMemo hooks are extracted
    query: |
      SELECT
        component_name,
        hook_name,
        file,
        line
      FROM react_component_hooks
      WHERE file LIKE '%node-react-app%'
        AND hook_name = 'useMemo'
      ORDER BY component_name, line
    expected_minimum: 3

  - name: custom_hooks_extracted
    description: Verify custom hooks (useAuth) are extracted
    query: |
      SELECT
        name,
        type,
        path,
        line
      FROM symbols
      WHERE path LIKE '%node-react-app/hooks/%'
        AND name LIKE 'use%'
      ORDER BY name
    expected_minimum: 1

  - name: hook_dependencies_extracted
    description: Verify hook dependency arrays are extracted
    query: |
      SELECT
        hook_component,
        hook_name,
        dependency_name,
        hook_file,
        hook_line
      FROM react_hook_dependencies
      WHERE hook_file LIKE '%node-react-app%'
      ORDER BY hook_file, hook_line, dependency_name
    expected_minimum: 15

  - name: tainted_dependencies_userid
    description: Find hooks with tainted userId dependency
    query: |
      SELECT
        rhd.hook_component,
        rhd.hook_name,
        rhd.dependency_name,
        rhd.hook_file,
        rhd.hook_line
      FROM react_hook_dependencies rhd
      WHERE rhd.hook_file LIKE '%node-react-app%'
        AND rhd.dependency_name = 'userId'
      ORDER BY rhd.hook_file, rhd.hook_line
    expected_minimum: 3

  - name: tainted_dependencies_multiple_in_single_hook
    description: Find hooks with multiple tainted dependencies in same dependency array
    query: |
      SELECT
        hook_component,
        hook_name,
        hook_file,
        hook_line,
        GROUP_CONCAT(dependency_name, ', ') AS all_dependencies
      FROM react_hook_dependencies
      WHERE hook_file LIKE '%node-react-app%'
      GROUP BY hook_file, hook_line, hook_component, hook_name
      HAVING COUNT(dependency_name) > 1
      ORDER BY hook_file, hook_line
    expected_minimum: 3

  - name: useeffect_with_tainted_deps
    description: Find useEffect hooks that depend on tainted props
    query: |
      SELECT
        rch.component_name,
        rch.hook_name,
        rhd.dependency_name,
        rch.file,
        rch.line
      FROM react_component_hooks rch
      JOIN react_hook_dependencies rhd
        ON rch.file = rhd.hook_file
        AND rch.line = rhd.hook_line
        AND rch.component_name = rhd.hook_component
      WHERE rch.file LIKE '%node-react-app%'
        AND rch.hook_name = 'useEffect'
        AND rhd.dependency_name IN ('userId', 'searchTerm', 'category', 'filter')
      ORDER BY rch.file, rch.line
    expected_minimum: 4

  - name: usecallback_with_tainted_deps
    description: Find useCallback hooks that depend on tainted variables
    query: |
      SELECT
        rch.component_name,
        rch.hook_name,
        rhd.dependency_name,
        rch.file,
        rch.line
      FROM react_component_hooks rch
      JOIN react_hook_dependencies rhd
        ON rch.file = rhd.hook_file
        AND rch.line = rhd.hook_line
        AND rch.component_name = rhd.hook_component
      WHERE rch.file LIKE '%node-react-app%'
        AND rch.hook_name = 'useCallback'
        AND rhd.dependency_name IN ('userId', 'user')
      ORDER BY rch.file, rch.line
    expected_minimum: 2

  - name: axios_api_calls_as_sinks
    description: Find axios API calls (taint sinks) in components
    query: |
      SELECT
        function_name,
        callee_function,
        file,
        line
      FROM function_calls
      WHERE file LIKE '%node-react-app%'
        AND (
          callee_function LIKE '%axios.get%'
          OR callee_function LIKE '%axios.post%'
          OR callee_function LIKE '%axios.put%'
        )
      ORDER BY file, line
    expected_minimum: 6

  - name: localstorage_taint_sources
    description: Find localStorage access (taint source) in useAuth hook
    query: |
      SELECT
        function_name,
        callee_function,
        file,
        line
      FROM function_calls
      WHERE file LIKE '%node-react-app/hooks/useAuth%'
        AND callee_function LIKE '%localStorage%'
      ORDER BY line
    expected_minimum: 2

  - name: hook_anti_pattern_detection
    description: |
      Find components using useState + useEffect but NOT useCallback.
      This is an anti-pattern that can cause unnecessary re-renders.

      ProductList component should be detected here.
    query: |
      SELECT
        rc.name AS component_name,
        rc.path AS component_file,
        GROUP_CONCAT(DISTINCT rch.hook_name) AS hooks_used
      FROM symbols rc
      JOIN react_component_hooks rch
        ON rc.path = rch.file
        AND (rc.name = rch.component_name OR rc.name LIKE rch.component_name || '%')
      WHERE rc.path LIKE '%node-react-app%'
        AND rc.type IN ('function', 'component')
      GROUP BY rc.name, rc.path
      HAVING
        hooks_used LIKE '%useState%'
        AND hooks_used LIKE '%useEffect%'
        AND hooks_used NOT LIKE '%useCallback%'
    expected_minimum: 1

security_patterns:
  - pattern: tainted_user_id_in_api_calls
    severity: MEDIUM
    description: |
      userId prop flows into API calls without sanitization.

      UserProfile component receives userId from props (potentially from URL),
      then uses it directly in API calls:
        - axios.get(`/api/users/${userId}`)
        - axios.get(`/api/users/${userId}/orders`)
        - axios.put(`/api/users/${userId}`, updates)

      If userId comes from URL parameter, attacker could access other users' data.
    query: |
      SELECT DISTINCT
        rhd.hook_component,
        rhd.hook_name,
        rhd.dependency_name,
        rhd.hook_file
      FROM react_hook_dependencies rhd
      WHERE rhd.hook_file LIKE '%UserProfile%'
        AND rhd.dependency_name = 'userId'

  - pattern: localstorage_as_taint_source
    severity: MEDIUM
    description: |
      useAuth hook reads JWT token from localStorage (user-controlled storage)
      and uses it in Authorization header.

      Vulnerable code:
        const token = localStorage.getItem('authToken');
        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;

      Attacker with XSS can modify localStorage and inject malicious token.
    query: |
      SELECT
        function_name,
        callee_function,
        file,
        line
      FROM function_calls
      WHERE file LIKE '%useAuth%'
        AND callee_function LIKE '%localStorage.getItem%'

  - pattern: react_hook_anti_pattern
    severity: LOW
    description: |
      ProductList component uses useState + useEffect without useCallback.

      This causes fetchProducts function to be recreated on every render,
      potentially leading to:
      - Unnecessary re-renders
      - Infinite loops if fetchProducts is added to useEffect deps
      - Performance issues

      Should use:
        const fetchProducts = useCallback(async () => { ... }, [category, searchTerm]);
    query: |
      SELECT
        component_name,
        GROUP_CONCAT(hook_name) AS hooks
      FROM react_component_hooks
      WHERE file LIKE '%ProductList%'
      GROUP BY component_name

expected_findings:
  - component: UserProfile
    hooks: [useState (4x), useEffect (2x), useCallback (1x), useMemo (2x)]
    tainted_dependencies:
      - userId: [useEffect line 44, useEffect line 69, useCallback line 85, useMemo line 108]
      - showDetails: [useEffect line 69]
      - user: [useMemo line 100]
      - orders: [useMemo line 108]
    taint_flows:
      - userId (prop) → axios.get(/api/users/${userId})
      - userId + showDetails (props) → axios.get(/api/users/${userId}/orders)
      - userId (prop) → axios.put(/api/users/${userId})

  - component: ProductList
    hooks: [useState (3x), useEffect (1x)]
    missing_hooks: [useCallback] # ANTI-PATTERN
    tainted_dependencies:
      - category: [useEffect line 59]
      - searchTerm: [useEffect line 59]
    taint_flows:
      - category + searchTerm (props) → axios.get(/api/products)
    anti_pattern: Missing useCallback for fetchProducts function

  - component: Dashboard
    hooks: [useState (2x), useEffect (2x), useCallback (1x), useMemo (1x), useContext (1x)]
    custom_hooks: [useAuth]
    tainted_dependencies:
      - user: [useEffect line 30, useCallback line 42]
      - filter: [useCallback line 42]
      - notifications: [useMemo line 56]
    taint_flows:
      - user.id (from localStorage token) → axios.get(/api/users/${user.id}/stats)
      - user.id + filter → axios.get(/api/users/${user.id}/notifications)

  - custom_hook: useAuth
    hooks: [useState (3x), useEffect (1x), useCallback (2x), useContext (1x)]
    tainted_dependencies:
      - empty_array: [useEffect line 29] # Run once on mount
      - user: [useCallback logout line 82]
    taint_sources:
      - localStorage.getItem('authToken') # User-controlled storage
    taint_sinks:
      - axios.defaults.headers.common['Authorization']
      - axios.post('/api/auth/login')
      - localStorage.setItem('authToken', token)

coverage_summary:
  total_components: 3 (UserProfile, ProductList, Dashboard)
  total_custom_hooks: 1 (useAuth)
  total_hook_instances: 20+
  hook_types_tested:
    - useState: 10 instances
    - useEffect: 6 instances
    - useCallback: 4 instances
    - useMemo: 3 instances
    - useContext: 2 instances
  tainted_dependencies: 8+ unique tainted props/variables
  taint_flows: 7+ source → sink paths
  anti_patterns: 1 (ProductList missing useCallback)
  security_vulnerabilities: 2 (tainted userId, localStorage token)
