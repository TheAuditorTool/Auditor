# React Query Fixture Verification Spec
# Tests: Query/mutation hooks, caching, optimistic updates, pagination
# Version: 1.0.0

name: "React Query (TanStack Query) Test Suite"
description: "Comprehensive React Query patterns for server state management"

# Test 1: QueryClient creation
- name: "queryClient instantiation"
  type: "query_client_extraction"
  description: "Verify QueryClient created with default options"
  query: |
    SELECT name, type, file
    FROM symbols
    WHERE name = 'queryClient' AND file LIKE '%query-client.js'
  expect:
    - name: "queryClient"
      type: "variable"

# Test 2: useUser query hook
- name: "useUser query hook"
  type: "hook_extraction"
  description: "Verify useUser hook with useQuery"
  query: |
    SELECT name, type, file
    FROM symbols
    WHERE name = 'useUser' AND file LIKE '%use-users.js'
  expect:
    - name: "useUser"
      type: "function"

# Test 3: useUsers list query
- name: "useUsers list query with polling"
  type: "hook_extraction"
  description: "Verify useUsers with refetchInterval (polling)"
  query: |
    SELECT name, type, file
    FROM symbols
    WHERE name = 'useUsers' AND file LIKE '%use-users.js'
  expect:
    - name: "useUsers"
      type: "function"

# Test 4: useCreateUser mutation
- name: "useCreateUser mutation hook"
  type: "mutation_extraction"
  description: "Verify useMutation with cache invalidation"
  query: |
    SELECT name, type, file
    FROM symbols
    WHERE name = 'useCreateUser' AND file LIKE '%use-mutations.js'
  expect:
    - name: "useCreateUser"
      type: "function"

# Test 5: useUpdateUser with optimistic updates
- name: "useUpdateUser optimistic mutation"
  type: "mutation_extraction"
  description: "Verify useMutation with optimistic updates and rollback"
  query: |
    SELECT name, type, file
    FROM symbols
    WHERE name = 'useUpdateUser' AND file LIKE '%use-mutations.js'
  expect:
    - name: "useUpdateUser"
      type: "function"

# Test 6: useInfinitePosts pagination
- name: "useInfinitePosts infinite query"
  type: "infinite_query_extraction"
  description: "Verify useInfiniteQuery with page-based pagination"
  query: |
    SELECT name, type, file
    FROM symbols
    WHERE name = 'useInfinitePosts' AND file LIKE '%use-infinite.js'
  expect:
    - name: "useInfinitePosts"
      type: "function"

# Test 7: useInfiniteProducts cursor pagination
- name: "useInfiniteProducts cursor-based"
  type: "infinite_query_extraction"
  description: "Verify cursor-based pagination"
  query: |
    SELECT name, type, file
    FROM symbols
    WHERE name = 'useInfiniteProducts' AND file LIKE '%use-infinite.js'
  expect:
    - name: "useInfiniteProducts"
      type: "function"

# Test 8: Taint flow - user query
- name: "useUser userId taint"
  type: "taint_tracking"
  description: "Verify userId (user input) -> fetchUser -> API request"
  query: |
    SELECT source, sink, flow_type
    FROM taint_flows
    WHERE source LIKE '%userId%' AND sink LIKE '%fetchUser%'
      AND file LIKE '%use-users.js'
  expect_count_min: 1

# Test 9: Taint flow - mutation data
- name: "useCreateUser userData taint"
  type: "taint_tracking"
  description: "Verify userData (user input) -> createUser -> API POST"
  query: |
    SELECT source, sink, flow_type
    FROM taint_flows
    WHERE source LIKE '%userData%' AND sink LIKE '%createUser%'
      AND file LIKE '%use-mutations.js'
  expect_count_min: 1

# Test 10: Taint flow - search query
- name: "useUserSearch query taint"
  type: "taint_tracking"
  description: "Verify searchQuery (user input) -> searchUsers -> API"
  query: |
    SELECT source, sink, flow_type
    FROM taint_flows
    WHERE source LIKE '%searchQuery%' AND sink LIKE '%searchUsers%'
      AND file LIKE '%use-users.js'
  expect_count_min: 1

# Test 11: All query hooks extracted
- name: "Total query hooks in use-users"
  type: "hook_extraction"
  description: "Verify all user query hooks extracted"
  query: |
    SELECT COUNT(*) as hook_count
    FROM symbols
    WHERE type = 'function' AND file LIKE '%use-users.js'
  expect_count_min: 7  # useUser, useUsers, useUserProfile, etc.

# Test 12: All mutation hooks extracted
- name: "Total mutation hooks"
  type: "mutation_extraction"
  description: "Verify all mutation hooks extracted"
  query: |
    SELECT COUNT(*) as mutation_count
    FROM symbols
    WHERE type = 'function' AND file LIKE '%use-mutations.js'
  expect_count_min: 8  # useCreateUser, useUpdateUser, useDeleteUser, etc.

# Test 13: All infinite query hooks
- name: "Total infinite query hooks"
  type: "infinite_query_extraction"
  description: "Verify all infinite query hooks extracted"
  query: |
    SELECT COUNT(*) as infinite_count
    FROM symbols
    WHERE type = 'function' AND file LIKE '%use-infinite.js'
  expect_count_min: 5  # useInfinitePosts, useInfiniteProducts, etc.

downstream_impact:
  blueprint:
    - "aud blueprint shows 'React Query: 20+ hooks (queries, mutations, infinite)'"
    - "Query keys structure and caching strategy"
    - "Optimistic update patterns identified"

  taint_analyze:
    - "Track user input through queries: userId -> API -> cache"
    - "Track mutations: userData -> POST -> cache invalidation"
    - "Track search: searchQuery -> API -> results"

  detect_patterns:
    - "Sensitive data in query cache (tokens, passwords)"
    - "Missing error handling in mutations"
    - "Inefficient query keys causing cache misses"
    - "Missing optimistic updates for better UX"

patterns_tested:
  query_patterns:
    - "Basic useQuery for data fetching"
    - "Dependent queries (wait for other data)"
    - "Polling with refetchInterval"
    - "Prefetching for better UX"
    - "Search queries with enabled condition"
    - "Authenticated queries with tokens"

  mutation_patterns:
    - "useMutation for POST/PUT/DELETE"
    - "Optimistic updates with rollback"
    - "Cache invalidation strategies"
    - "Bulk operations"
    - "File uploads with progress"

  infinite_query_patterns:
    - "Page-based pagination"
    - "Cursor-based pagination"
    - "Infinite scroll"
    - "Search with pagination"

  caching_patterns:
    - "Query keys with parameters"
    - "Stale time configuration"
    - "Cache time configuration"
    - "Manual cache updates (setQueryData)"
    - "Cache invalidation"

real_world_coverage:
  production_use_cases:
    - "User data fetching and caching"
    - "CRUD operations with optimistic UI"
    - "Infinite scroll lists"
    - "Search with pagination"
    - "Real-time data with polling"
    - "File uploads"

  frameworks_simulated:
    - "@tanstack/react-query 5.x"
    - "Axios for HTTP client"
    - "React hooks integration"
