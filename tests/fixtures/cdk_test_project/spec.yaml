name: cdk_test_project
description: |
  AWS CDK security vulnerability extraction testing with Python/TypeScript parity.

  Contains IDENTICAL security misconfigurations in both:
  - vulnerable_stack.py (Python CDK)
  - vulnerable_stack.ts (TypeScript CDK)

  Tests CDK-specific extraction capabilities:
  - CDK construct instantiation (s3.Bucket, rds.DatabaseInstance, ec2.SecurityGroup)
  - Security-relevant properties (publicReadAccess, storageEncrypted, etc.)
  - Parity between Python and TypeScript CDK patterns

verification_rules:
  - name: cdk_constructs_python
    description: Verify Python CDK construct extraction
    query: |
      SELECT construct_type, construct_id
      FROM cdk_constructs
      WHERE file LIKE '%vulnerable_stack.py'
      ORDER BY construct_id
    expected_minimum: 3

  - name: cdk_constructs_typescript
    description: Verify TypeScript CDK construct extraction
    query: |
      SELECT construct_type, construct_id
      FROM cdk_constructs
      WHERE file LIKE '%vulnerable_stack.ts'
      ORDER BY construct_id
    expected_minimum: 3

  - name: cdk_security_misconfigs_python
    description: Find security misconfigurations in Python CDK
    query: |
      SELECT
        construct_id,
        property_name,
        property_value
      FROM cdk_construct_properties
      WHERE file LIKE '%vulnerable_stack.py'
        AND (
          (property_name = 'publicReadAccess' AND property_value = 'true')
          OR (property_name = 'storageEncrypted' AND property_value = 'false')
          OR (property_name = 'allowAllOutbound' AND property_value = 'true')
        )
      ORDER BY construct_id
    expected_minimum: 3

  - name: cdk_security_misconfigs_typescript
    description: Find security misconfigurations in TypeScript CDK
    query: |
      SELECT
        construct_id,
        property_name,
        property_value
      FROM cdk_construct_properties
      WHERE file LIKE '%vulnerable_stack.ts'
        AND (
          (property_name = 'publicReadAccess' AND property_value = 'true')
          OR (property_name = 'storageEncrypted' AND property_value = 'false')
          OR (property_name = 'allowAllOutbound' AND property_value = 'true')
        )
      ORDER BY construct_id
    expected_minimum: 3

  - name: cdk_parity_check
    description: Verify Python and TypeScript extract same constructs
    query: |
      SELECT
        py.construct_type,
        py.construct_id AS python_id,
        ts.construct_id AS typescript_id
      FROM cdk_constructs py
      JOIN cdk_constructs ts
        ON py.construct_type = ts.construct_type
      WHERE py.file LIKE '%vulnerable_stack.py'
        AND ts.file LIKE '%vulnerable_stack.ts'
      ORDER BY py.construct_type
    expected_minimum: 3

security_patterns:
  - pattern: s3_public_access
    severity: CRITICAL
    description: |
      S3 bucket with publicReadAccess=true allows anyone on the internet
      to read bucket contents, potentially exposing sensitive data.
    query: |
      SELECT construct_id, file
      FROM cdk_construct_properties
      WHERE property_name = 'publicReadAccess'
        AND property_value = 'true'

  - pattern: rds_unencrypted
    severity: HIGH
    description: |
      RDS database with storageEncrypted=false stores data at rest without
      encryption, violating compliance requirements (PCI-DSS, HIPAA, SOC 2).
    query: |
      SELECT construct_id, file
      FROM cdk_construct_properties
      WHERE property_name = 'storageEncrypted'
        AND property_value = 'false'

  - pattern: security_group_open_outbound
    severity: MEDIUM
    description: |
      Security group with allowAllOutbound=true allows unrestricted egress,
      enabling data exfiltration if instance is compromised.
    query: |
      SELECT construct_id, file
      FROM cdk_construct_properties
      WHERE property_name = 'allowAllOutbound'
        AND property_value = 'true'

expected_findings:
  python_cdk:
    - construct: PublicBucket (s3.Bucket)
      vulnerability: publicReadAccess=true
      severity: CRITICAL
    - construct: UnencryptedDB (rds.DatabaseInstance)
      vulnerability: storageEncrypted=false
      severity: HIGH
    - construct: OpenSecurityGroup (ec2.SecurityGroup)
      vulnerability: allowAllOutbound=true
      severity: MEDIUM

  typescript_cdk:
    - construct: PublicBucket (s3.Bucket)
      vulnerability: publicReadAccess=true
      severity: CRITICAL
    - construct: UnencryptedDB (rds.DatabaseInstance)
      vulnerability: storageEncrypted=false
      severity: HIGH
    - construct: OpenSecurityGroup (ec2.SecurityGroup)
      vulnerability: allowAllOutbound=true
      severity: MEDIUM

parity_requirements:
  - Both Python and TypeScript must extract same 3 constructs
  - Both must detect same 3 security misconfigurations
  - Property names and values must match exactly
  - Severity levels must be consistent across languages
