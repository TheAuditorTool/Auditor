# Zustand State Management Fixture Verification Spec
# Tests: Store creation, middleware, state updates, selectors, computed values
# Version: 1.0.0

name: "Zustand State Management Test Suite"
description: "Comprehensive Zustand patterns for global state, middleware, and selectors"

# Test 1: Auth store creation
- name: "useAuthStore store creation"
  type: "store_extraction"
  description: "Verify useAuthStore created with persist and devtools middleware"
  query: |
    SELECT
      name,
      type,
      file
    FROM symbols
    WHERE name = 'useAuthStore'
      AND type = 'variable'
      AND file LIKE '%stores/auth-store.js'
  expect:
    - name: "useAuthStore"
      type: "variable"

# Test 2: Cart store creation
- name: "useCartStore store creation"
  type: "store_extraction"
  description: "Verify useCartStore with subscribeWithSelector middleware"
  query: |
    SELECT
      name,
      type,
      file
    FROM symbols
    WHERE name = 'useCartStore'
      AND type = 'variable'
      AND file LIKE '%stores/cart-store.js'
  expect:
    - name: "useCartStore"
      type: "variable"

# Test 3: Todo store creation with Immer
- name: "useTodoStore with Immer"
  type: "store_extraction"
  description: "Verify useTodoStore uses Immer middleware"
  query: |
    SELECT
      name,
      type,
      file
    FROM symbols
    WHERE name = 'useTodoStore'
      AND type = 'variable'
      AND file LIKE '%stores/todo-store.js'
  expect:
    - name: "useTodoStore"
      type: "variable"

# Test 4: UI store creation
- name: "useUIStore store creation"
  type: "store_extraction"
  description: "Verify useUIStore with persist for theme preferences"
  query: |
    SELECT
      name,
      type,
      file
    FROM symbols
    WHERE name = 'useUIStore'
      AND type = 'variable'
      AND file LIKE '%stores/ui-store.js'
  expect:
    - name: "useUIStore"
      type: "variable"

# Test 5: Auth login action
- name: "login action in auth store"
  type: "action_extraction"
  description: "Verify login action with async API call"
  query: |
    SELECT
      name,
      type,
      file
    FROM symbols
    WHERE name = 'login'
      AND type = 'function'
      AND file LIKE '%stores/auth-store.js'
  expect:
    - name: "login"
      type: "function"

# Test 6: Cart addItem action
- name: "addItem action in cart store"
  type: "action_extraction"
  description: "Verify addItem with duplicate check and quantity update"
  query: |
    SELECT
      name,
      type,
      file
    FROM symbols
    WHERE name = 'addItem'
      AND type = 'function'
      AND file LIKE '%stores/cart-store.js'
  expect:
    - name: "addItem"
      type: "function"

# Test 7: Cart computed values
- name: "getTotal computed value"
  type: "action_extraction"
  description: "Verify cart total calculation with discounts and tax"
  query: |
    SELECT
      name,
      type,
      file
    FROM symbols
    WHERE name = 'getTotal'
      AND type = 'function'
      AND file LIKE '%stores/cart-store.js'
  expect:
    - name: "getTotal"
      type: "function"

# Test 8: Todo Immer updates
- name: "addTodo with Immer"
  type: "action_extraction"
  description: "Verify Immer-based state push for todos"
  query: |
    SELECT
      name,
      type,
      file
    FROM symbols
    WHERE name = 'addTodo'
      AND type = 'function'
      AND file LIKE '%stores/todo-store.js'
  expect:
    - name: "addTodo"
      type: "function"

# Test 9: Todo filtering
- name: "getFilteredTodos computed"
  type: "action_extraction"
  description: "Verify filtering, searching, and sorting logic"
  query: |
    SELECT
      name,
      type,
      file
    FROM symbols
    WHERE name = 'getFilteredTodos'
      AND type = 'function'
      AND file LIKE '%stores/todo-store.js'
  expect:
    - name: "getFilteredTodos"
      type: "function"

# Test 10: UI modal management
- name: "openModal action"
  type: "action_extraction"
  description: "Verify modal state management"
  query: |
    SELECT
      name,
      type,
      file
    FROM symbols
    WHERE name = 'openModal'
      AND type = 'function'
      AND file LIKE '%stores/ui-store.js'
  expect:
    - name: "openModal"
      type: "function"

# Test 11: UI notifications
- name: "addNotification action"
  type: "action_extraction"
  description: "Verify notification queue with auto-dismiss"
  query: |
    SELECT
      name,
      type,
      file
    FROM symbols
    WHERE name = 'addNotification'
      AND type = 'function'
      AND file LIKE '%stores/ui-store.js'
  expect:
    - name: "addNotification"
      type: "function"

# Test 12: Auth selectors
- name: "selectUser selector export"
  type: "selector_extraction"
  description: "Verify selector functions exported"
  query: |
    SELECT
      name,
      type,
      file
    FROM symbols
    WHERE name = 'selectUser'
      AND type = 'variable'
      AND file LIKE '%stores/auth-store.js'
  expect:
    - name: "selectUser"
      type: "variable"

# Test 13: Taint flow - auth login
- name: "Auth login credentials taint"
  type: "taint_tracking"
  description: "Verify credentials (user input) -> login -> state taint flow"
  query: |
    SELECT
      source,
      sink,
      flow_type
    FROM taint_flows
    WHERE source LIKE '%credentials%'
      AND sink LIKE '%login%'
      AND file LIKE '%stores/auth-store.js'
  expect_count_min: 1

# Test 14: Taint flow - cart product data
- name: "Cart addItem product taint"
  type: "taint_tracking"
  description: "Verify product (user input) -> addItem -> cart items taint"
  query: |
    SELECT
      source,
      sink,
      flow_type
    FROM taint_flows
    WHERE source LIKE '%product%'
      AND sink LIKE '%addItem%'
      AND file LIKE '%stores/cart-store.js'
  expect_count_min: 1

# Test 15: Taint flow - todo user input
- name: "Todo addTodo data taint"
  type: "taint_tracking"
  description: "Verify todoData (user input) -> addTodo -> todos taint"
  query: |
    SELECT
      source,
      sink,
      flow_type
    FROM taint_flows
    WHERE source LIKE '%todoData%'
      AND sink LIKE '%addTodo%'
      AND file LIKE '%stores/todo-store.js'
  expect_count_min: 1

# Test 16: All auth store actions
- name: "Total auth store actions"
  type: "action_extraction"
  description: "Verify all auth actions extracted"
  query: |
    SELECT
      COUNT(*) as action_count
    FROM symbols
    WHERE type = 'function'
      AND file LIKE '%stores/auth-store.js'
  expect_count_min: 8  # login, logout, refreshSession, updateProfile, etc.

# Test 17: All cart store actions
- name: "Total cart store actions"
  type: "action_extraction"
  description: "Verify all cart actions extracted"
  query: |
    SELECT
      COUNT(*) as action_count
    FROM symbols
    WHERE type = 'function'
      AND file LIKE '%stores/cart-store.js'
  expect_count_min: 15  # addItem, removeItem, getTotal, etc.

# Test 18: All todo store actions
- name: "Total todo store actions"
  type: "action_extraction"
  description: "Verify all todo actions extracted"
  query: |
    SELECT
      COUNT(*) as action_count
    FROM symbols
    WHERE type = 'function'
      AND file LIKE '%stores/todo-store.js'
  expect_count_min: 15  # addTodo, toggleTodo, addSubtask, etc.

# Test 19: All UI store actions
- name: "Total UI store actions"
  type: "action_extraction"
  description: "Verify all UI actions extracted"
  query: |
    SELECT
      COUNT(*) as action_count
    FROM symbols
    WHERE type = 'function'
      AND file LIKE '%stores/ui-store.js'
  expect_count_min: 20  # Theme, sidebar, modals, notifications, loading, errors

# Test 20: All stores extracted
- name: "Total Zustand stores"
  type: "store_extraction"
  description: "Verify all 4 stores created"
  query: |
    SELECT
      COUNT(*) as store_count
    FROM symbols
    WHERE type = 'variable'
      AND name LIKE 'use%Store'
      AND file LIKE '%stores/%'
  expect_count: 4  # useAuthStore, useCartStore, useTodoStore, useUIStore

downstream_impact:
  blueprint:
    - "aud blueprint will show 'Zustand: 4 stores (auth, cart, todo, ui)'"
    - "Store middleware: persist (auth, cart, ui), immer (todo)"
    - "Selectors: 25+ selector functions across stores"

  planning:
    - "Identify stores that could be split (useUIStore has many concerns)"
    - "Detect missing persist on stores that should save state"
    - "Suggest selector optimizations to prevent re-renders"

  taint_analyze:
    - "Track user input through stores: credentials -> auth state"
    - "Track cart taint: product data -> cart items -> checkout"
    - "Track todo taint: user input -> todo array -> render"

  context:
    - "Query which components use which stores"
    - "Identify global state dependencies"
    - "Find actions that trigger side effects (API calls)"

  detect_patterns:
    - "Sensitive data in persisted state (tokens, passwords)"
    - "Missing error handling in async actions"
    - "State updates without loading flags"
    - "Unoptimized selectors causing re-renders"

patterns_tested:
  store_patterns:
    - "Basic store creation with create()"
    - "Middleware chaining (devtools + persist + immer)"
    - "Persist middleware with partialize"
    - "Immer middleware for immutable updates"
    - "subscribeWithSelector for selective subscriptions"

  state_patterns:
    - "Async actions with API calls"
    - "Optimistic updates"
    - "Computed values (getters)"
    - "Derived state from multiple sources"
    - "State reset and cleanup"

  action_patterns:
    - "CRUD operations (create, read, update, delete)"
    - "Array manipulation (push, filter, splice)"
    - "Nested object updates"
    - "Bulk operations (toggleAll, clearAll)"
    - "Conditional updates"

  selector_patterns:
    - "Basic selectors (state slices)"
    - "Derived selectors (computed values)"
    - "Parameterized selectors (selectTodoById)"
    - "Boolean selectors (isEmpty, isLoading)"

  security_patterns:
    - "Token storage in persisted state"
    - "Session expiry checking"
    - "Permission and role checking"
    - "Error state management"

real_world_coverage:
  production_use_cases:
    - "Authentication state (login, logout, session)"
    - "Shopping cart (items, discounts, totals)"
    - "Todo/task management (CRUD, filtering, sorting)"
    - "UI state (theme, modals, notifications)"
    - "Global loading and error states"

  frameworks_simulated:
    - "Zustand 4.x"
    - "Immer for immutable updates"
    - "LocalStorage persistence"
    - "React hooks integration"
