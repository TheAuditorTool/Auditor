name: node_vue_app
description: |
  Vue 3 SPA fixture for testing Composition API, reactive patterns, computed properties,
  watchers, lifecycle hooks, and taint flows through Vue reactive system.

  Tests:
  - Vue component extraction (UserProfile, ProductList, Dashboard)
  - Composition API patterns (ref, computed, watch, watchEffect)
  - Lifecycle hooks (onMounted, onUnmounted)
  - Custom composables (useAuth)
  - v-model two-way binding with tainted data
  - Computed properties depending on tainted refs
  - Watchers on tainted props and refs
  - Taint flows: props -> ref -> computed -> axios API calls
  - localStorage as taint source in composables
  - Multi-source taint (user.id from token + filter from input)

verification_rules:
  - name: vue_components_extracted
    description: Verify all Vue components are extracted
    query: |
      SELECT
        name,
        type,
        path,
        line
      FROM symbols
      WHERE path LIKE '%node-vue-app/src/components/%'
        AND type IN ('component', 'function')
        AND name IN ('UserProfile', 'ProductList', 'Dashboard')
      ORDER BY name
    expected_minimum: 3

  - name: vue_composable_extracted
    description: Verify custom composable (useAuth) is extracted
    query: |
      SELECT
        name,
        type,
        path,
        line
      FROM symbols
      WHERE path LIKE '%node-vue-app/src/composables/%'
        AND name LIKE 'use%'
      ORDER BY name
    expected_minimum: 1

  - name: vue_ref_declarations
    description: Find ref() declarations in components
    query: |
      SELECT
        function_name,
        callee_function,
        file,
        line
      FROM function_calls
      WHERE file LIKE '%node-vue-app%'
        AND callee_function LIKE '%ref%'
      ORDER BY file, line
    expected_minimum: 15

  - name: vue_computed_declarations
    description: Find computed() declarations in components
    query: |
      SELECT
        function_name,
        callee_function,
        file,
        line
      FROM function_calls
      WHERE file LIKE '%node-vue-app%'
        AND callee_function LIKE '%computed%'
      ORDER BY file, line
    expected_minimum: 6

  - name: vue_watch_declarations
    description: Find watch() declarations in components
    query: |
      SELECT
        function_name,
        callee_function,
        file,
        line
      FROM function_calls
      WHERE file LIKE '%node-vue-app%'
        AND callee_function LIKE '%watch%'
      ORDER BY file, line
    expected_minimum: 8

  - name: vue_lifecycle_hooks
    description: Find lifecycle hooks (onMounted, onUnmounted)
    query: |
      SELECT
        function_name,
        callee_function,
        file,
        line
      FROM function_calls
      WHERE file LIKE '%node-vue-app%'
        AND (
          callee_function LIKE '%onMounted%'
          OR callee_function LIKE '%onUnmounted%'
        )
      ORDER BY file, line
    expected_minimum: 5

  - name: axios_api_calls_in_vue
    description: Find axios API calls in Vue components
    query: |
      SELECT
        function_name,
        callee_function,
        file,
        line
      FROM function_calls
      WHERE file LIKE '%node-vue-app%'
        AND (
          callee_function LIKE '%axios.get%'
          OR callee_function LIKE '%axios.post%'
          OR callee_function LIKE '%axios.put%'
        )
      ORDER BY file, line
    expected_minimum: 10

  - name: localstorage_taint_in_composable
    description: Find localStorage access (taint source) in useAuth composable
    query: |
      SELECT
        function_name,
        callee_function,
        file,
        line
      FROM function_calls
      WHERE file LIKE '%node-vue-app/src/composables/useAuth%'
        AND callee_function LIKE '%localStorage%'
      ORDER BY line
    expected_minimum: 2

  - name: tainted_props_in_components
    description: Find components with tainted props (userId, showDetails, category, filter)
    query: |
      SELECT
        name,
        path,
        line
      FROM symbols
      WHERE path LIKE '%node-vue-app/src/components/%'
        AND type = 'component'
      ORDER BY path, line
    expected_minimum: 3

  - name: v_model_bindings
    description: Find v-model bindings (searchTerm, selectedCategory, notificationFilter)
    query: |
      SELECT
        function_name,
        file,
        line
      FROM function_calls
      WHERE file LIKE '%node-vue-app%'
        AND function_name LIKE '%search%'
      ORDER BY file, line
    expected_minimum: 2

security_patterns:
  - pattern: tainted_props_in_api_calls
    severity: MEDIUM
    description: |
      Props from parent components (potentially from URL) flow into API calls.

      UserProfile receives userId prop:
        props: { userId: { type: Number, required: true } }
        axios.get(`/api/users/${props.userId}`)

      Dashboard receives filter prop:
        props: { filter: { type: String, default: '' } }
        axios.get(`/api/users/${user.id}/notifications?filter=${filter}`)

      If props come from URL parameters, attacker can manipulate them.

      Impact: Horizontal privilege escalation, access control bypass.
    query: |
      SELECT
        function_name,
        callee_function,
        file,
        line
      FROM function_calls
      WHERE file LIKE '%node-vue-app%'
        AND callee_function LIKE '%axios.get%'

  - pattern: localstorage_token_manipulation
    severity: MEDIUM
    description: |
      useAuth composable reads JWT token from localStorage (user-controlled).

      Vulnerable code:
        const storedToken = localStorage.getItem('authToken');
        axios.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`;

      Attacker with XSS can modify localStorage and inject malicious token.

      Impact: Token injection, session hijacking.
    query: |
      SELECT
        function_name,
        callee_function,
        file,
        line
      FROM function_calls
      WHERE file LIKE '%useAuth%'
        AND callee_function LIKE '%localStorage.getItem%'

  - pattern: user_input_in_computed_filters
    severity: LOW
    description: |
      User input via v-model flows into computed properties with filter logic.

      ProductList:
        v-model="searchTerm" -> filteredProducts computed property
        v-model="selectedCategory" -> filteredProducts computed property

      While Vue doesn't execute code, logic bugs in filters can cause issues.

      Impact: Filter bypass, incorrect data display.
    query: |
      SELECT
        function_name,
        callee_function,
        file,
        line
      FROM function_calls
      WHERE file LIKE '%node-vue-app%'
        AND callee_function LIKE '%computed%'

expected_findings:
  components:
    - UserProfile:
        props: [userId (tainted), showDetails (tainted)]
        refs: [user, loading, error, orders, lastSeen]
        computed: [fullName, orderStats]
        watchers: [userId, showDetails, watchEffect]
        lifecycle: [onMounted, onUnmounted]
        api_calls: [GET /api/users/:userId, GET /api/users/:userId/orders, PUT /api/users/:userId]

    - ProductList:
        props: [category (tainted)]
        refs: [products, loading, searchTerm (v-model tainted), selectedCategory (v-model tainted)]
        computed: [filteredProducts, totalProducts]
        watchers: [selectedCategory, props.category]
        lifecycle: [onMounted]
        api_calls: [GET /api/products, GET /api/products/:id, POST /api/cart]

    - Dashboard:
        props: [filter (tainted)]
        composables: [useAuth]
        refs: [stats, notifications, notificationFilter (v-model tainted)]
        computed: [unreadCount, filteredNotifications]
        watchers: [user (from composable), notificationFilter, props.filter]
        lifecycle: [onMounted, onUnmounted]
        api_calls: [GET /api/users/:id/stats, GET /api/users/:id/notifications, PUT /api/users/:id/notifications/:id]

  composables:
    - useAuth:
        refs: [user, loading, error, token]
        computed: [isAuthenticated, isAdmin]
        lifecycle: [onMounted]
        taint_sources: [localStorage.getItem('authToken')]
        taint_sinks: [axios.defaults.headers.common['Authorization'], localStorage.setItem]
        api_calls: [GET /api/auth/me, POST /api/auth/login, POST /api/auth/logout]

  taint_flows:
    - props.userId -> ref -> axios.get(/api/users/:userId)
    - props.showDetails -> watch -> fetchOrders -> axios.get
    - v-model searchTerm -> computed filteredProducts -> fetchProducts -> axios.get
    - v-model selectedCategory -> watch -> fetchProducts -> axios.get
    - localStorage token -> useAuth composable -> user.id -> axios.get(/api/users/:id/stats)
    - user.id + notificationFilter -> axios.get(/api/users/:id/notifications?filter=...)
    - props.filter -> ref notificationFilter -> watch -> fetchNotifications

  security_vulnerabilities:
    - MEDIUM: Tainted userId prop in API calls (horizontal privilege escalation)
    - MEDIUM: localStorage token manipulation (session hijacking)
    - LOW: User input in computed filters (logic bugs)

coverage_summary:
  total_components: 3 (UserProfile, ProductList, Dashboard)
  total_composables: 1 (useAuth)
  total_refs: 20+ (including composable)
  total_computed: 6 (fullName, orderStats, filteredProducts, totalProducts, unreadCount, filteredNotifications)
  total_watchers: 8+ (on props, refs, composable refs)
  total_lifecycle_hooks: 5 (onMounted, onUnmounted)
  total_api_calls: 13+ distinct endpoints
  taint_flows: 7+ distinct source -> sink paths
  security_patterns: 3 (tainted props, localStorage, user input filters)
