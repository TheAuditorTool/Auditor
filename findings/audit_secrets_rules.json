{
  "category": "secrets",
  "audit_date": "2025-10-04",
  "files_audited": [
    "hardcoded_secret_analyze.py"
  ],
  "total_files": 1,
  "total_violations": 2,
  "violations_by_file": {
    "hardcoded_secret_analyze.py": {
      "total_violations": 2,
      "metadata_violations": [],
      "database_contract_violations": [
        {
          "violation_type": "FORBIDDEN_TABLE_EXISTENCE_CHECK",
          "severity": "CRITICAL",
          "lines": "200-206",
          "description": "Uses sqlite_master to check table existence - ABSOLUTE PROHIBITION violated",
          "code": "cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name IN ('assignments', 'function_call_args', 'symbols', 'files')\")",
          "required_action": "REMOVE - Schema contract guarantees all tables exist",
          "impact": "Architectural cancer pattern that undermines schema contract system"
        },
        {
          "violation_type": "GRACEFUL_DEGRADATION_PATTERN",
          "severity": "CRITICAL",
          "lines": "209-217",
          "description": "Implements graceful degradation based on table existence checks",
          "code": "has_assignments = 'assignments' in existing_tables\nhas_function_calls = 'function_call_args' in existing_tables\nhas_symbols = 'symbols' in existing_tables\nhas_files = 'files' in existing_tables",
          "required_action": "REMOVE ALL CONDITIONAL LOGIC - Assume all tables exist",
          "impact": "Creates fallback execution paths that mask schema violations"
        }
      ],
      "finding_generation_violations": [],
      "positive_patterns": [
        {
          "pattern": "FROZENSETS_FOR_PATTERNS",
          "lines": "72-163",
          "description": "Uses frozensets for O(1) pattern matching - GOLD STANDARD",
          "examples": [
            "SECRET_KEYWORDS (line 72)",
            "WEAK_PASSWORDS (line 84)",
            "PLACEHOLDER_VALUES (line 92)",
            "NON_SECRET_VALUES (line 100)",
            "URL_PROTOCOLS (line 107)",
            "DB_PROTOCOLS (line 113)",
            "HIGH_CONFIDENCE_PATTERNS (line 120)",
            "GENERIC_SECRET_PATTERNS (line 138)",
            "SEQUENTIAL_PATTERNS (line 147)",
            "KEYBOARD_PATTERNS (line 157)"
          ]
        },
        {
          "pattern": "VALID_DATABASE_QUERIES",
          "description": "All queries use valid table names and column names from schema.py",
          "tables_queried": [
            "assignments",
            "function_call_args",
            "symbols",
            "files"
          ],
          "all_columns_validated": true
        },
        {
          "pattern": "CORRECT_FINDING_GENERATION",
          "description": "All 8 StandardFinding calls use correct parameter names and enums",
          "finding_count": 8,
          "uses_correct_parameters": true,
          "uses_enums": true
        },
        {
          "pattern": "JUSTIFIED_HYBRID_APPROACH",
          "lines": "1-14, 30-35",
          "description": "File I/O justified because entropy calculation and pattern matching are computational",
          "justification": "Entropy calculation (Shannon entropy) cannot be pre-indexed. Base64 decoding and sequential pattern detection are algorithmic operations."
        },
        {
          "pattern": "COMPREHENSIVE_SECRET_DETECTION",
          "description": "Detects multiple secret types: API keys, passwords, connection strings, env fallbacks, dict literals, URL params, provider-specific patterns",
          "detection_methods": [
            "Database-based assignment analysis",
            "Entropy calculation",
            "Provider-specific regex patterns (AWS, GitHub, Stripe, etc.)",
            "Weak password detection",
            "Connection string parsing",
            "Base64 decoding and validation"
          ]
        }
      ]
    }
  },
  "gold_standard_files": [],
  "critical_issues": [
    {
      "issue": "FORBIDDEN_PATTERN_DETECTED",
      "severity": "CRITICAL",
      "file": "hardcoded_secret_analyze.py",
      "description": "Uses sqlite_master table existence checks - explicitly forbidden by CLAUDE.md",
      "quote_from_claude_md": "NO FALLBACKS. NO REGEX. NO EXCEPTIONS. The schema contract system (theauditor/indexer/schema.py) guarantees table existence. Rules MUST assume all contracted tables exist. Any table existence check is architectural cancer.",
      "required_fix": "Remove lines 200-217 (table existence checks and graceful degradation)",
      "estimated_fix_time": "5 minutes",
      "risk_if_unfixed": "Undermines entire schema contract system; creates maintenance burden; masks real schema violations"
    }
  ],
  "compliance_score": 0,
  "compliance_breakdown": {
    "metadata": {
      "score": 100,
      "details": "Perfect metadata configuration - comprehensive target_extensions, excellent exclude_patterns, correct requires_jsx_pass setting"
    },
    "database_contracts": {
      "score": 0,
      "details": "CRITICAL VIOLATION: Uses forbidden sqlite_master pattern. All actual queries are valid, but table existence checks disqualify file from compliance."
    },
    "finding_generation": {
      "score": 100,
      "details": "All 8 StandardFinding calls use correct parameter names and enums"
    }
  },
  "summary": {
    "overall_status": "CRITICAL_VIOLATIONS_DETECTED",
    "quality_assessment": "HIGH QUALITY CODE with ONE CRITICAL ARCHITECTURAL VIOLATION",
    "strengths": [
      "Excellent use of frozensets for O(1) pattern matching (10 frozensets defined)",
      "Comprehensive secret detection coverage (API keys, passwords, connection strings, env fallbacks, provider patterns)",
      "Valid database queries with proper column names",
      "Perfect finding generation with correct parameters and enums",
      "Justified hybrid approach with clear documentation",
      "Sophisticated entropy calculation and pattern detection",
      "Good parameterized queries to prevent SQL injection"
    ],
    "weaknesses": [
      "CRITICAL: Uses forbidden sqlite_master table existence checks (lines 200-206)",
      "CRITICAL: Implements graceful degradation pattern (lines 209-217)",
      "Does not use build_query() helper from schema.py (acceptable for complex queries)",
      "Hybrid approach requires file I/O (justified but less efficient than pure database)"
    ],
    "recommendation": "REQUIRES IMMEDIATE FIX - Remove table existence checks (lines 200-217) to achieve gold standard compliance. After this fix, file would be exemplary."
  },
  "fix_instructions": {
    "step_1": {
      "action": "Remove lines 200-217",
      "description": "Delete entire table existence checking block and graceful degradation logic"
    },
    "step_2": {
      "action": "Simplify conditional checks",
      "description": "Remove all 'has_assignments', 'has_function_calls', 'has_symbols', 'has_files' conditionals from lines 221-237"
    },
    "step_3": {
      "action": "Assume all tables exist",
      "description": "Execute all database queries directly without existence checks"
    },
    "expected_result": "Rule will crash with clear error if schema contract is violated (CORRECT behavior)"
  }
}
