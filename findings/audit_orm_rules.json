{
  "audit_metadata": {
    "category": "orm",
    "folder_path": "C:\\Users\\santa\\Desktop\\TheAuditor\\theauditor\\rules\\orm\\",
    "audit_date": "2025-10-04",
    "total_files": 3,
    "schema_reference": "C:\\Users\\santa\\Desktop\\TheAuditor\\theauditor\\indexer\\schema.py"
  },
  "files_audited": [
    "prisma_analyze.py",
    "sequelize_analyze.py",
    "typeorm_analyze.py"
  ],
  "total_violations": 21,
  "critical_issues": [
    {
      "file": "prisma_analyze.py",
      "severity": "CRITICAL",
      "violation": "Table existence check via sqlite_master query (lines 128-135)",
      "prohibited_pattern": "SELECT name FROM sqlite_master WHERE type='table'",
      "reason": "Schema contract system guarantees table existence. Rules MUST assume contracted tables exist. Any table check is architectural cancer.",
      "impact": "Fallback logic pattern - violates schema contract architecture"
    },
    {
      "file": "prisma_analyze.py",
      "severity": "CRITICAL",
      "violation": "Conditional execution based on table existence (lines 138-148)",
      "prohibited_pattern": "if 'orm_queries' not in existing_tables: return findings",
      "reason": "Rules must assume tables exist per schema contract. If table missing, rule SHOULD crash.",
      "impact": "Graceful degradation violates fail-fast principle"
    },
    {
      "file": "prisma_analyze.py",
      "severity": "CRITICAL",
      "violation": "Invalid column reference in schema (line 344)",
      "prohibited_pattern": "is_id = 1",
      "reason": "prisma_models table in schema.py has NO is_id column. Valid columns are: model_name, field_name, field_type, is_indexed, is_unique, is_relation",
      "impact": "Query will crash at runtime - column doesn't exist"
    },
    {
      "file": "sequelize_analyze.py",
      "severity": "CRITICAL",
      "violation": "Table existence check via sqlite_master query (lines 169-176)",
      "prohibited_pattern": "SELECT name FROM sqlite_master WHERE type='table'",
      "reason": "Schema contract system guarantees table existence. Rules MUST assume contracted tables exist.",
      "impact": "Fallback logic pattern - violates schema contract architecture"
    },
    {
      "file": "sequelize_analyze.py",
      "severity": "CRITICAL",
      "violation": "Conditional execution based on table existence (line 148-149)",
      "prohibited_pattern": "if 'function_call_args' not in self.existing_tables: return []",
      "reason": "Rules must assume tables exist per schema contract. If table missing, rule SHOULD crash.",
      "impact": "Graceful degradation violates fail-fast principle"
    },
    {
      "file": "typeorm_analyze.py",
      "severity": "CRITICAL",
      "violation": "Table existence check via sqlite_master query (lines 147-154)",
      "prohibited_pattern": "SELECT name FROM sqlite_master WHERE type='table'",
      "reason": "Schema contract system guarantees table existence. Rules MUST assume contracted tables exist.",
      "impact": "Fallback logic pattern - violates schema contract architecture"
    },
    {
      "file": "typeorm_analyze.py",
      "severity": "CRITICAL",
      "violation": "Conditional execution based on table existence (line 157-158)",
      "prohibited_pattern": "if 'function_call_args' not in existing_tables: return findings",
      "reason": "Rules must assume tables exist per schema contract. If table missing, rule SHOULD crash.",
      "impact": "Graceful degradation violates fail-fast principle"
    }
  ],
  "violations_by_file": {
    "prisma_analyze.py": {
      "total_violations": 8,
      "check_1_metadata": {
        "status": "PASS",
        "issues": []
      },
      "check_2_database_contracts": {
        "status": "FAIL",
        "issues": [
          {
            "line": "128-135",
            "violation": "PROHIBITED: Table existence check via sqlite_master",
            "pattern": "SELECT name FROM sqlite_master WHERE type='table' AND name IN (...)",
            "severity": "CRITICAL"
          },
          {
            "line": "138-148",
            "violation": "PROHIBITED: Conditional execution based on table existence flags",
            "pattern": "has_orm_queries = 'orm_queries' in existing_tables; if has_orm_queries: ...",
            "severity": "CRITICAL"
          },
          {
            "line": "153-163",
            "violation": "Graceful degradation pattern - checks has_orm_queries before query",
            "pattern": "if has_orm_queries: cursor.execute(...)",
            "severity": "HIGH"
          },
          {
            "line": "344",
            "violation": "Invalid column reference - is_id does NOT exist in prisma_models schema",
            "pattern": "WHERE is_indexed = 1 OR is_unique = 1 OR is_id = 1",
            "schema_violation": "prisma_models columns: model_name, field_name, field_type, is_indexed, is_unique, is_relation (NO is_id)",
            "severity": "CRITICAL"
          },
          {
            "line": "442",
            "violation": "Invalid column reference - is_id does NOT exist in prisma_models schema",
            "pattern": "AND is_id = 0",
            "severity": "CRITICAL"
          },
          {
            "line": "Multiple",
            "violation": "NO use of build_query() - all queries are hardcoded SQL strings",
            "severity": "MEDIUM",
            "impact": "Not using schema-safe query builder"
          }
        ]
      },
      "check_3_finding_generation": {
        "status": "PASS",
        "issues": []
      },
      "build_query_usage": {
        "count": 0,
        "expected": ">0",
        "violation": "Should use build_query() from schema.py for database queries"
      }
    },
    "sequelize_analyze.py": {
      "total_violations": 7,
      "check_1_metadata": {
        "status": "PASS",
        "issues": []
      },
      "check_2_database_contracts": {
        "status": "FAIL",
        "issues": [
          {
            "line": "169-176",
            "violation": "PROHIBITED: Table existence check via sqlite_master",
            "pattern": "SELECT name FROM sqlite_master WHERE type='table' AND name IN (...)",
            "severity": "CRITICAL"
          },
          {
            "line": "148-149",
            "violation": "PROHIBITED: Conditional execution based on table existence",
            "pattern": "if 'function_call_args' not in self.existing_tables: return []",
            "severity": "CRITICAL"
          },
          {
            "line": "259-260",
            "violation": "Graceful degradation pattern - checks table before query",
            "pattern": "if 'function_call_args' not in self.existing_tables: return 1",
            "severity": "HIGH"
          },
          {
            "line": "349-358",
            "violation": "Graceful degradation pattern - checks assignments table before query",
            "pattern": "if 'assignments' in self.existing_tables: cursor.execute(...)",
            "severity": "HIGH"
          },
          {
            "line": "550-551",
            "violation": "Graceful degradation pattern - checks sql_queries table before query",
            "pattern": "if 'sql_queries' not in self.existing_tables: return",
            "severity": "HIGH"
          },
          {
            "line": "Multiple",
            "violation": "NO use of build_query() - all queries are hardcoded SQL strings",
            "severity": "MEDIUM"
          }
        ]
      },
      "check_3_finding_generation": {
        "status": "PASS",
        "issues": []
      },
      "build_query_usage": {
        "count": 0,
        "expected": ">0",
        "violation": "Should use build_query() from schema.py for database queries"
      }
    },
    "typeorm_analyze.py": {
      "total_violations": 6,
      "check_1_metadata": {
        "status": "PASS",
        "issues": []
      },
      "check_2_database_contracts": {
        "status": "FAIL",
        "issues": [
          {
            "line": "147-154",
            "violation": "PROHIBITED: Table existence check via sqlite_master",
            "pattern": "SELECT name FROM sqlite_master WHERE type='table' AND name IN (...)",
            "severity": "CRITICAL"
          },
          {
            "line": "157-158",
            "violation": "PROHIBITED: Conditional execution based on table existence",
            "pattern": "if 'function_call_args' not in existing_tables: return findings",
            "severity": "CRITICAL"
          },
          {
            "line": "161-166",
            "violation": "Graceful degradation pattern - creates table existence flags",
            "pattern": "has_function_calls = 'function_call_args' in existing_tables",
            "severity": "HIGH"
          },
          {
            "line": "171-199",
            "violation": "Graceful degradation pattern - checks has_function_calls before query",
            "pattern": "if has_function_calls: cursor.execute(...)",
            "severity": "HIGH"
          },
          {
            "line": "Multiple",
            "violation": "NO use of build_query() - all queries are hardcoded SQL strings",
            "severity": "MEDIUM"
          }
        ]
      },
      "check_3_finding_generation": {
        "status": "PASS",
        "issues": []
      },
      "build_query_usage": {
        "count": 0,
        "expected": ">0",
        "violation": "Should use build_query() from schema.py for database queries"
      }
    }
  },
  "gold_standard_files": [],
  "schema_contract_violations": {
    "prisma_analyze.py": [
      {
        "line": 344,
        "table": "prisma_models",
        "invalid_column": "is_id",
        "valid_columns": ["model_name", "field_name", "field_type", "is_indexed", "is_unique", "is_relation"],
        "impact": "RUNTIME CRASH - Column does not exist in schema"
      },
      {
        "line": 442,
        "table": "prisma_models",
        "invalid_column": "is_id",
        "valid_columns": ["model_name", "field_name", "field_type", "is_indexed", "is_unique", "is_relation"],
        "impact": "RUNTIME CRASH - Column does not exist in schema"
      }
    ],
    "sequelize_analyze.py": [],
    "typeorm_analyze.py": []
  },
  "prohibited_patterns_found": {
    "table_existence_checks": {
      "count": 3,
      "files": ["prisma_analyze.py", "sequelize_analyze.py", "typeorm_analyze.py"],
      "pattern": "SELECT name FROM sqlite_master WHERE type='table'",
      "prohibition_reason": "Schema contract guarantees table existence. Rules MUST assume tables exist."
    },
    "conditional_execution_on_tables": {
      "count": 3,
      "files": ["prisma_analyze.py", "sequelize_analyze.py", "typeorm_analyze.py"],
      "pattern": "if 'table_name' not in existing_tables: return",
      "prohibition_reason": "Rules must fail-fast if tables missing, not gracefully degrade"
    },
    "graceful_degradation_flags": {
      "count": 15,
      "files": ["prisma_analyze.py", "sequelize_analyze.py", "typeorm_analyze.py"],
      "pattern": "has_table_name = 'table' in existing_tables; if has_table_name: ...",
      "prohibition_reason": "Violates fail-fast principle of schema contract system"
    },
    "missing_build_query_usage": {
      "count": 3,
      "files": ["prisma_analyze.py", "sequelize_analyze.py", "typeorm_analyze.py"],
      "pattern": "Direct SQL strings instead of build_query()",
      "prohibition_reason": "Should use schema-aware query builder for type safety"
    }
  },
  "compliance_score": 0,
  "compliance_breakdown": {
    "metadata_compliance": "100%",
    "schema_contract_compliance": "0%",
    "finding_generation_compliance": "100%",
    "overall": "0%"
  },
  "recommendations": [
    {
      "priority": "P0",
      "file": "prisma_analyze.py",
      "action": "REMOVE all table existence checks (lines 128-135). Delete existing_tables variable and all has_* flags.",
      "reason": "Schema contract guarantees tables exist. Rule should crash if they don't."
    },
    {
      "priority": "P0",
      "file": "prisma_analyze.py",
      "action": "FIX invalid column references - replace is_id with is_indexed OR remove entirely (lines 344, 442)",
      "reason": "is_id column does NOT exist in prisma_models schema. This will cause runtime crashes."
    },
    {
      "priority": "P0",
      "file": "sequelize_analyze.py",
      "action": "REMOVE _check_table_availability() method and all table existence checks",
      "reason": "Violates schema contract architecture"
    },
    {
      "priority": "P0",
      "file": "typeorm_analyze.py",
      "action": "REMOVE all table existence checks and has_* flags (lines 147-166)",
      "reason": "Violates schema contract architecture"
    },
    {
      "priority": "P1",
      "file": "ALL",
      "action": "Replace hardcoded SQL with build_query() from schema.py",
      "example": "from theauditor.indexer.schema import build_query\\nquery = build_query('function_call_args', ['file', 'line', 'callee_function'])",
      "reason": "Schema-aware queries with runtime validation"
    },
    {
      "priority": "P1",
      "file": "ALL",
      "action": "Add frozensets for O(1) pattern matching where missing",
      "reason": "Performance optimization per gold standard"
    }
  ],
  "summary": {
    "total_files_audited": 3,
    "files_with_violations": 3,
    "gold_standard_compliant_files": 0,
    "most_common_violation": "Table existence checks via sqlite_master (PROHIBITED)",
    "critical_schema_violations": 2,
    "architectural_cancer_instances": 21,
    "estimated_fix_time": "4-6 hours",
    "risk_assessment": "HIGH - Multiple runtime crash risks due to invalid column references and architectural violations"
  }
}
