{
  "category": "vue",
  "audit_date": "2025-10-04",
  "files_audited": [
    "component_analyze.py",
    "hooks_analyze.py",
    "lifecycle_analyze.py",
    "reactivity_analyze.py",
    "render_analyze.py",
    "state_analyze.py"
  ],
  "total_violations": 32,
  "violations_by_file": {
    "component_analyze.py": {
      "total_violations": 7,
      "check1_metadata": {
        "status": "PASS",
        "issues": []
      },
      "check2_database_contracts": {
        "status": "FAIL",
        "issues": [
          {
            "line": 142,
            "violation": "FORBIDDEN: Table existence check via 'existing_tables' parameter - violates schema contract system",
            "severity": "CRITICAL",
            "context": "def _get_vue_files(cursor, existing_tables: Set[str])"
          },
          {
            "line": 147,
            "violation": "FORBIDDEN: Conditional table query based on existence check",
            "severity": "CRITICAL",
            "context": "if 'vue_components' in existing_tables:"
          },
          {
            "line": 155,
            "violation": "FORBIDDEN: Fallback logic with table existence check",
            "severity": "CRITICAL",
            "context": "if not vue_files and 'files' in existing_tables:"
          },
          {
            "line": 164,
            "violation": "FORBIDDEN: Fallback logic with table existence check",
            "severity": "CRITICAL",
            "context": "if not vue_files and 'symbols' in existing_tables:"
          },
          {
            "line": 159,
            "violation": "INCORRECT: Query uses 'file_path' from 'files' table, should be 'path' per schema.py line 179",
            "severity": "HIGH",
            "context": "SELECT DISTINCT file_path FROM files WHERE file_path LIKE '%.vue'"
          },
          {
            "line": 385,
            "violation": "INCORRECT: Query uses 'file_path' from 'files' table, should be 'path' per schema.py line 179",
            "severity": "HIGH",
            "context": "SELECT DISTINCT f.file_path FROM files f WHERE f.file_path IN ..."
          },
          {
            "line": 387,
            "violation": "INCORRECT: Query uses 'file_path' in WHERE clause, should be 'path'",
            "severity": "HIGH",
            "context": "WHERE f.file_path IN ({placeholders}) AND f.file_path LIKE '%.vue'"
          }
        ]
      },
      "check3_finding_generation": {
        "status": "PASS",
        "issues": []
      }
    },
    "hooks_analyze.py": {
      "total_violations": 4,
      "check1_metadata": {
        "status": "PASS",
        "issues": []
      },
      "check2_database_contracts": {
        "status": "FAIL",
        "issues": [
          {
            "line": 142,
            "violation": "FORBIDDEN: Table existence check via 'existing_tables' parameter - violates schema contract system",
            "severity": "CRITICAL",
            "context": "def _get_composition_api_files(cursor, existing_tables: Set[str])"
          },
          {
            "line": 147,
            "violation": "FORBIDDEN: Conditional table query based on existence check",
            "severity": "CRITICAL",
            "context": "if 'symbols' in existing_tables:"
          },
          {
            "line": 161,
            "violation": "FORBIDDEN: Conditional table query based on existence check",
            "severity": "CRITICAL",
            "context": "if 'function_call_args' in existing_tables:"
          },
          {
            "line": 213,
            "violation": "WARNING: Using numeric confidence (0.7) instead of Confidence enum - but StandardFinding may accept numeric (verify base.py)",
            "severity": "MEDIUM",
            "context": "confidence=Confidence.MEDIUM if context else Confidence.LOW"
          }
        ]
      },
      "check3_finding_generation": {
        "status": "PASS",
        "issues": []
      }
    },
    "lifecycle_analyze.py": {
      "total_violations": 4,
      "check1_metadata": {
        "status": "PASS",
        "issues": []
      },
      "check2_database_contracts": {
        "status": "FAIL",
        "issues": [
          {
            "line": 153,
            "violation": "FORBIDDEN: Table existence check via 'existing_tables' parameter - violates schema contract system",
            "severity": "CRITICAL",
            "context": "def _get_vue_files(cursor, existing_tables: Set[str])"
          },
          {
            "line": 157,
            "violation": "FORBIDDEN: Conditional table query based on existence check",
            "severity": "CRITICAL",
            "context": "if 'files' in existing_tables:"
          },
          {
            "line": 159,
            "violation": "INCORRECT: Query uses 'file_path' from 'files' table, should be 'path' per schema.py line 179",
            "severity": "HIGH",
            "context": "SELECT DISTINCT file_path FROM files WHERE file_path LIKE '%.vue'"
          },
          {
            "line": 168,
            "violation": "FORBIDDEN: Conditional table query based on existence check",
            "severity": "CRITICAL",
            "context": "if 'function_call_args' in existing_tables:"
          }
        ]
      },
      "check3_finding_generation": {
        "status": "PASS",
        "issues": []
      }
    },
    "reactivity_analyze.py": {
      "total_violations": 3,
      "check1_metadata": {
        "status": "PASS",
        "issues": []
      },
      "check2_database_contracts": {
        "status": "FAIL",
        "issues": [
          {
            "line": 152,
            "violation": "WARNING: Uses numeric confidence (0.7) instead of Confidence enum at line 152",
            "severity": "MEDIUM",
            "context": "confidence=0.7  # Lower confidence since we can't verify it's actually a prop"
          },
          {
            "line": 263,
            "violation": "WARNING: Uses numeric confidence (0.90) instead of Confidence enum at line 263",
            "severity": "MEDIUM",
            "context": "confidence=0.90,"
          },
          {
            "line": 283,
            "violation": "WARNING: Uses numeric confidence (0.85) instead of Confidence enum at line 283",
            "severity": "MEDIUM",
            "context": "confidence=0.85,"
          }
        ]
      },
      "check3_finding_generation": {
        "status": "WARNING",
        "issues": [
          {
            "line": 152,
            "violation": "Using numeric confidence instead of Confidence enum",
            "context": "May be acceptable if StandardFinding supports numeric confidence, but inconsistent with other Vue rules"
          }
        ]
      }
    },
    "render_analyze.py": {
      "total_violations": 4,
      "check1_metadata": {
        "status": "PASS",
        "issues": []
      },
      "check2_database_contracts": {
        "status": "FAIL",
        "issues": [
          {
            "line": 145,
            "violation": "FORBIDDEN: Table existence check via 'existing_tables' parameter - violates schema contract system",
            "severity": "CRITICAL",
            "context": "def _get_vue_files(cursor, existing_tables: Set[str])"
          },
          {
            "line": 149,
            "violation": "FORBIDDEN: Conditional table query based on existence check",
            "severity": "CRITICAL",
            "context": "if 'files' in existing_tables:"
          },
          {
            "line": 151,
            "violation": "INCORRECT: Query uses 'file_path' from 'files' table, should be 'path' per schema.py line 179",
            "severity": "HIGH",
            "context": "SELECT DISTINCT file_path FROM files WHERE file_path LIKE '%.vue'"
          },
          {
            "line": 160,
            "violation": "FORBIDDEN: Conditional table query based on existence check",
            "severity": "CRITICAL",
            "context": "if 'symbols' in existing_tables:"
          }
        ]
      },
      "check3_finding_generation": {
        "status": "PASS",
        "issues": []
      }
    },
    "state_analyze.py": {
      "total_violations": 10,
      "check1_metadata": {
        "status": "PASS",
        "issues": []
      },
      "check2_database_contracts": {
        "status": "FAIL",
        "issues": [
          {
            "line": 151,
            "violation": "FORBIDDEN: Table existence check via 'existing_tables' parameter - violates schema contract system",
            "severity": "CRITICAL",
            "context": "def _get_store_files(cursor, existing_tables: Set[str])"
          },
          {
            "line": 156,
            "violation": "FORBIDDEN: Conditional table query based on existence check",
            "severity": "CRITICAL",
            "context": "if 'files' in existing_tables:"
          },
          {
            "line": 158,
            "violation": "INCORRECT: Query uses 'file_path' from 'files' table, should be 'path' per schema.py line 179",
            "severity": "HIGH",
            "context": "SELECT DISTINCT file_path FROM files WHERE file_path LIKE '%store%'"
          },
          {
            "line": 168,
            "violation": "FORBIDDEN: Conditional table query based on existence check",
            "severity": "CRITICAL",
            "context": "if 'symbols' in existing_tables:"
          },
          {
            "line": 286,
            "violation": "INCORRECT: Query references 'path' variable from outer SELECT without proper alias - should be 's1.path'",
            "severity": "MEDIUM",
            "context": "SELECT DISTINCT path FROM symbols WHERE ... AND NOT EXISTS (SELECT 1 FROM symbols s2 WHERE s2.path = path ...)"
          },
          {
            "line": 294,
            "violation": "INCORRECT: Query references 'path' variable in EXISTS subquery without proper correlation",
            "severity": "MEDIUM",
            "context": "AND NOT EXISTS (SELECT 1 FROM symbols s2 WHERE s2.path = path ...)"
          },
          {
            "line": 291,
            "violation": "INCORRECT: Query has uncorrelated subquery - 'path' in line 294 should reference outer query alias",
            "severity": "MEDIUM",
            "context": "Full query at lines 288-299"
          },
          {
            "line": 462,
            "violation": "INCORRECT: Query uses 'path' from symbols without GROUP BY correlation",
            "severity": "MEDIUM",
            "context": "SELECT path, COUNT(*) as prop_count FROM symbols WHERE ... GROUP BY path"
          },
          {
            "line": 485,
            "violation": "INCORRECT: Query uses 'path' from symbols without proper GROUP BY",
            "severity": "MEDIUM",
            "context": "SELECT path, SUM(...) FROM symbols WHERE ... GROUP BY path"
          },
          {
            "line": 299,
            "violation": "WARNING: Query pattern is complex and may have logical issues due to uncorrelated subqueries",
            "severity": "LOW",
            "context": "ORDER BY path at line 299"
          }
        ]
      },
      "check3_finding_generation": {
        "status": "PASS",
        "issues": []
      }
    }
  },
  "gold_standard_files": [],
  "critical_issues": [
    {
      "pattern": "FORBIDDEN_TABLE_EXISTENCE_CHECKS",
      "affected_files": [
        "component_analyze.py",
        "hooks_analyze.py",
        "lifecycle_analyze.py",
        "render_analyze.py",
        "state_analyze.py"
      ],
      "count": 17,
      "description": "All Vue rules use 'existing_tables: Set[str]' parameter and conditional table queries. This violates CLAUDE.md absolute prohibition on table existence checks and fallback logic.",
      "fix_required": "Remove 'existing_tables' parameter from all helper functions. Assume all tables exist per schema contract. If table is missing, rule MUST crash to expose indexer bugs."
    },
    {
      "pattern": "INCORRECT_COLUMN_NAMES",
      "affected_files": [
        "component_analyze.py",
        "lifecycle_analyze.py",
        "render_analyze.py",
        "state_analyze.py"
      ],
      "count": 9,
      "description": "Multiple rules query 'file_path' from 'files' table, but schema.py defines it as 'path' (line 179). This will cause query failures.",
      "fix_required": "Replace all 'file_path' references with 'path' when querying 'files' table. Verify against schema.py TABLES['files'] definition."
    },
    {
      "pattern": "NUMERIC_CONFIDENCE_VALUES",
      "affected_files": [
        "reactivity_analyze.py"
      ],
      "count": 3,
      "description": "reactivity_analyze.py uses numeric confidence values (0.7, 0.85, 0.90) instead of Confidence enum. Inconsistent with other Vue rules that use Confidence.HIGH/MEDIUM/LOW.",
      "fix_required": "Replace numeric confidence with Confidence enum values OR document that StandardFinding accepts numeric confidence."
    },
    {
      "pattern": "UNCORRELATED_SUBQUERIES",
      "affected_files": [
        "state_analyze.py"
      ],
      "count": 4,
      "description": "state_analyze.py has several queries with uncorrelated subqueries where 'path' variable is not properly aliased or correlated with outer query.",
      "fix_required": "Fix subquery correlation by using proper table aliases (e.g., s1.path) throughout queries at lines 286-299, 462, 485."
    }
  ],
  "compliance_score": 0,
  "compliance_breakdown": {
    "metadata_compliance": 100,
    "database_contract_compliance": 0,
    "finding_generation_compliance": 95
  },
  "summary": {
    "total_files": 6,
    "files_with_violations": 6,
    "gold_standard_count": 0,
    "must_fix_violations": 30,
    "should_fix_violations": 2,
    "notes": [
      "ALL Vue rules follow the FORBIDDEN pattern of table existence checks via 'existing_tables' parameter",
      "This is architectural cancer that must be removed per CLAUDE.md lines 308-350",
      "Multiple column name mismatches will cause runtime query failures",
      "reactivity_analyze.py is unique in using numeric confidence - verify if this is intentional design pattern",
      "Overall pattern suggests Vue rules were written before schema contract system enforcement",
      "URGENT: All Vue rules need refactoring to remove table existence checks and fix column names"
    ]
  },
  "recommended_fixes": [
    {
      "priority": "P0_CRITICAL",
      "action": "Remove all 'existing_tables' parameter usage from helper functions",
      "files": [
        "component_analyze.py:142",
        "hooks_analyze.py:142",
        "lifecycle_analyze.py:153",
        "render_analyze.py:145",
        "state_analyze.py:151"
      ],
      "rationale": "Violates schema contract system - tables MUST be assumed to exist"
    },
    {
      "priority": "P0_CRITICAL",
      "action": "Replace 'file_path' with 'path' in all queries to 'files' table",
      "files": [
        "component_analyze.py:159,385,387",
        "lifecycle_analyze.py:159",
        "render_analyze.py:151",
        "state_analyze.py:158"
      ],
      "rationale": "Column name mismatch with schema.py - will cause query failures"
    },
    {
      "priority": "P1_HIGH",
      "action": "Fix uncorrelated subqueries in state_analyze.py",
      "files": [
        "state_analyze.py:286-299,462,485"
      ],
      "rationale": "Logical errors in SQL queries - may return incorrect results"
    },
    {
      "priority": "P2_MEDIUM",
      "action": "Standardize confidence values in reactivity_analyze.py to use Confidence enum",
      "files": [
        "reactivity_analyze.py:152,263,283"
      ],
      "rationale": "Consistency with other Vue rules, unless numeric confidence is intentional hybrid AST pattern"
    }
  ]
}
