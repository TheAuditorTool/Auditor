{
  "audit_metadata": {
    "category": "auth",
    "audit_date": "2025-10-04",
    "sop_version": "3-Step Atomic Audit",
    "schema_contract_version": "v1.1+",
    "files_audited": [
      "jwt_analyze.py",
      "oauth_analyze.py",
      "password_analyze.py",
      "session_analyze.py"
    ],
    "total_files": 4
  },

  "executive_summary": {
    "total_violations": 42,
    "critical_violations": 4,
    "high_violations": 0,
    "medium_violations": 38,
    "compliance_score": 14,
    "gold_standard_files": [],
    "status": "NON-COMPLIANT - Schema contract violations in all 4 files"
  },

  "violations_by_file": {
    "jwt_analyze.py": {
      "file_path": "C:\\Users\\santa\\Desktop\\TheAuditor\\theauditor\\rules\\auth\\jwt_analyze.py",
      "total_violations": 13,
      "check_1_metadata": {
        "status": "PASS",
        "violations": []
      },
      "check_2_database_contracts": {
        "status": "FAIL",
        "violations": [
          {
            "type": "NO_BUILD_QUERY_USAGE",
            "severity": "CRITICAL",
            "count": 13,
            "description": "All 13 SQL queries use hardcoded SQL instead of build_query() from schema.py",
            "affected_lines": [129, 162, 199, 236, 272, 302, 331, 377, 412, 450, 486, 519, 553],
            "tables_queried": ["function_call_args", "assignments"],
            "columns_validated": "ALL VALID - no schema mismatches",
            "recommendation": "Replace hardcoded SQL with build_query() from theauditor.indexer.schema"
          }
        ]
      },
      "check_3_finding_generation": {
        "status": "PASS",
        "violations": [],
        "findings_count": 13,
        "all_use_severity_enum": true,
        "all_use_file_path_param": true,
        "all_required_fields_present": true
      },
      "compliance_details": {
        "metadata_compliant": true,
        "schema_contract_compliant": false,
        "finding_format_compliant": true,
        "frozensets_used": true,
        "no_table_checks": true,
        "no_fallback_logic": true
      }
    },

    "oauth_analyze.py": {
      "file_path": "C:\\Users\\santa\\Desktop\\TheAuditor\\theauditor\\rules\\auth\\oauth_analyze.py",
      "total_violations": 10,
      "check_1_metadata": {
        "status": "PASS",
        "violations": []
      },
      "check_2_database_contracts": {
        "status": "FAIL",
        "violations": [
          {
            "type": "NO_BUILD_QUERY_USAGE",
            "severity": "CRITICAL",
            "count": 10,
            "description": "All 10 SQL queries use hardcoded SQL instead of build_query()",
            "affected_lines": [194, 219, 232, 282, 305, 334, 353, 406, 438, 471],
            "tables_queried": ["api_endpoints", "function_call_args", "assignments"],
            "columns_validated": "ALL VALID",
            "recommendation": "Replace hardcoded SQL with build_query() from theauditor.indexer.schema"
          }
        ]
      },
      "check_3_finding_generation": {
        "status": "PASS",
        "violations": [],
        "findings_count": 6,
        "all_use_severity_enum": true,
        "all_use_confidence_enum": true,
        "includes_recommendation_field": true
      },
      "compliance_details": {
        "metadata_compliant": true,
        "schema_contract_compliant": false,
        "finding_format_compliant": true,
        "frozensets_used": true,
        "no_table_checks": true,
        "no_fallback_logic": true
      }
    },

    "password_analyze.py": {
      "file_path": "C:\\Users\\santa\\Desktop\\TheAuditor\\theauditor\\rules\\auth\\password_analyze.py",
      "total_violations": 9,
      "check_1_metadata": {
        "status": "PASS",
        "violations": []
      },
      "check_2_database_contracts": {
        "status": "FAIL",
        "violations": [
          {
            "type": "NO_BUILD_QUERY_USAGE",
            "severity": "CRITICAL",
            "count": 8,
            "description": "All 8 SQL queries use hardcoded SQL instead of build_query()",
            "affected_lines": [210, 251, 272, 321, 405, 448, 502, 535],
            "tables_queried": ["function_call_args", "assignments"],
            "columns_validated": "ALL VALID",
            "recommendation": "Replace hardcoded SQL with build_query()"
          },
          {
            "type": "DYNAMIC_SQL_FSTRING",
            "severity": "CRITICAL",
            "line": 321,
            "description": "Dynamic SQL construction using f-string with user-controlled list iteration (SQL injection risk in tooling)",
            "code": "cursor.execute(f\"\"\"SELECT file, line, target_var, source_expr FROM assignments WHERE ({keyword_conditions})...\"\"\", params)",
            "recommendation": "Use parameterized queries or build_query() with proper escaping"
          }
        ]
      },
      "check_3_finding_generation": {
        "status": "PASS",
        "violations": [],
        "findings_count": 8,
        "all_use_severity_enum": true,
        "includes_recommendation_field": true
      },
      "compliance_details": {
        "metadata_compliant": true,
        "schema_contract_compliant": false,
        "finding_format_compliant": true,
        "frozensets_used": true,
        "no_table_checks": true,
        "has_dynamic_sql": true
      }
    },

    "session_analyze.py": {
      "file_path": "C:\\Users\\santa\\Desktop\\TheAuditor\\theauditor\\rules\\auth\\session_analyze.py",
      "total_violations": 7,
      "check_1_metadata": {
        "status": "PASS",
        "violations": []
      },
      "check_2_database_contracts": {
        "status": "FAIL",
        "violations": [
          {
            "type": "NO_BUILD_QUERY_USAGE",
            "severity": "CRITICAL",
            "count": 7,
            "description": "All 7 SQL queries use hardcoded SQL instead of build_query()",
            "affected_lines": [174, 238, 302, 367, 390, 431, 465],
            "tables_queried": ["function_call_args", "assignments"],
            "columns_validated": "ALL VALID",
            "recommendation": "Replace hardcoded SQL with build_query()"
          }
        ]
      },
      "check_3_finding_generation": {
        "status": "PASS",
        "violations": [],
        "findings_count": 9,
        "all_use_severity_enum": true,
        "includes_recommendation_field": true
      },
      "compliance_details": {
        "metadata_compliant": true,
        "schema_contract_compliant": false,
        "finding_format_compliant": true,
        "frozensets_used": true,
        "no_table_checks": true,
        "no_fallback_logic": true
      }
    }
  },

  "critical_issues": [
    {
      "issue": "Zero build_query() usage across all 4 files",
      "impact": "Schema contract system bypassed - queries will break if column names change",
      "affected_files": ["jwt_analyze.py", "oauth_analyze.py", "password_analyze.py", "session_analyze.py"],
      "total_hardcoded_queries": 38,
      "severity": "CRITICAL",
      "fix_priority": "P0",
      "estimated_fix_time": "2 hours"
    },
    {
      "issue": "Dynamic SQL with f-string in password_analyze.py line 321",
      "impact": "Potential SQL injection in TheAuditor tooling itself",
      "affected_files": ["password_analyze.py"],
      "severity": "CRITICAL",
      "fix_priority": "P0",
      "estimated_fix_time": "15 minutes"
    }
  ],

  "positive_findings": [
    {
      "finding": "All column names match schema.py definitions",
      "status": "No column name mismatches detected across 38 queries"
    },
    {
      "finding": "No table existence checks via sqlite_master",
      "status": "All files correctly assume table existence per schema contract"
    },
    {
      "finding": "Proper use of frozensets for O(1) pattern matching",
      "status": "All 4 files use frozensets for pattern lookups (jwt_analyze.py: 3 frozensets, oauth_analyze.py: 5 frozensets, password_analyze.py: 6 frozensets, session_analyze.py: 4 frozensets)"
    },
    {
      "finding": "Standardized finding generation",
      "status": "All 36 findings across 4 files use Severity enum, file_path= parameter, and required fields"
    },
    {
      "finding": "Consistent metadata structure",
      "status": "All 4 files have proper RuleMetadata with smart file filtering"
    }
  ],

  "schema_contract_compliance": {
    "tables_used": [
      "function_call_args",
      "assignments",
      "api_endpoints"
    ],
    "tables_validated_against_schema": true,
    "column_mismatches": 0,
    "queries_using_build_query": 0,
    "queries_hardcoded": 38,
    "compliance_percentage": 0
  },

  "remediation_plan": {
    "phase_1_critical_fixes": [
      {
        "task": "Fix dynamic SQL in password_analyze.py line 321",
        "priority": "P0",
        "effort": "15 minutes",
        "approach": "Replace f-string query with build_query() or proper parameterization"
      },
      {
        "task": "Refactor jwt_analyze.py to use build_query()",
        "priority": "P0",
        "effort": "45 minutes",
        "affected_queries": 13
      }
    ],
    "phase_2_standardization": [
      {
        "task": "Refactor oauth_analyze.py to use build_query()",
        "priority": "P1",
        "effort": "30 minutes",
        "affected_queries": 10
      },
      {
        "task": "Refactor password_analyze.py to use build_query()",
        "priority": "P1",
        "effort": "30 minutes",
        "affected_queries": 8
      },
      {
        "task": "Refactor session_analyze.py to use build_query()",
        "priority": "P1",
        "effort": "25 minutes",
        "affected_queries": 7
      }
    ],
    "total_estimated_effort": "2 hours 25 minutes"
  },

  "recommendations": {
    "immediate_actions": [
      "Fix SQL injection risk in password_analyze.py line 321",
      "Implement build_query() wrapper functions for common query patterns",
      "Add schema validation tests for all auth rules"
    ],
    "long_term_improvements": [
      "Create shared query builders for auth pattern detection (e.g., check_cookie_flags(), find_session_operations())",
      "Add CI/CD checks to prevent hardcoded SQL in new rules",
      "Document auth rules query patterns in CLAUDE.md"
    ]
  },

  "comparison_to_gold_standard": {
    "expected_patterns": [
      "from theauditor.indexer.schema import build_query",
      "query = build_query('table_name', ['col1', 'col2'])",
      "frozensets for O(1) lookups",
      "NO table existence checks",
      "Severity enum usage",
      "file_path= parameter in StandardFinding"
    ],
    "actual_implementation": {
      "build_query_import": "MISSING in all 4 files",
      "build_query_usage": "0/38 queries (0%)",
      "frozensets": "PRESENT in all 4 files",
      "table_checks": "NONE (correct)",
      "severity_enum": "PRESENT in all findings",
      "finding_format": "CORRECT in all files"
    }
  },

  "conclusion": {
    "overall_assessment": "NON-COMPLIANT with schema contract system",
    "key_strengths": [
      "Excellent finding generation format (100% compliant)",
      "Proper use of frozensets and pattern matching",
      "No architectural violations (no table checks, no fallbacks)",
      "All column names validated against schema"
    ],
    "key_weaknesses": [
      "Zero adoption of build_query() system (0/38 queries)",
      "SQL injection risk in password_analyze.py",
      "Missed opportunity for schema-enforced type safety"
    ],
    "verdict": "Previously marked as GOLD STANDARD in Phase 2, but NOT compliant with v1.1+ schema contract requirements. Requires refactoring to use build_query() for all database operations.",
    "re_audit_required": true,
    "estimated_compliance_after_fixes": "95%"
  }
}
