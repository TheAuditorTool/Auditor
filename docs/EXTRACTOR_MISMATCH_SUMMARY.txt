================================================================================
EXTRACTOR RETURN STRUCTURE vs STORAGE CONTRACT AUDIT - QUICK REFERENCE
================================================================================
Date: 2025-10-03
Scope: All 7 extractors vs _store_extracted_data() in theauditor/indexer/__init__.py

================================================================================
CRITICAL FINDINGS (P0)
================================================================================

1. ❌ IMPORTS/REFS - add_ref() SIGNATURE MISMATCH
   Location: theauditor/indexer/database.py:1045

   Extractor Returns:     3-tuple (kind, module, line)
   Storage Calls:         add_ref(file_path, kind, resolved, line)  ← 4 args!
   Method Signature:      add_ref(src, kind, value)  ← 3 params!

   Impact: RUNTIME ERROR or line numbers silently dropped
   Fix: Update add_ref() to accept line parameter

2. ❌ TYPE_ANNOTATIONS - INCOMPLETE FIELD EXTRACTION
   Location: theauditor/indexer/extractors/javascript.py:493-504

   Extractor Returns:     4 fields (line, symbol_name, annotation_type, type_text)
   Storage Expects:       13 fields (column, is_any, is_unknown, is_generic,
                                     has_type_params, type_params, return_type,
                                     extends_type, + 4 above)

   Impact: Type analysis 70% incomplete, 9 fields always NULL/FALSE
   Fix: Enhance JavaScript extractor type annotation extraction

================================================================================
HIGH PRIORITY ISSUES (P1)
================================================================================

3. ⚠️  DOCKER_INFO - DEAD CODE
   Location: theauditor/indexer/__init__.py:690-698

   Extractor:      DockerExtractor uses direct DB writes (no docker_info key)
   Storage:        Expects docker_info dict and tries to write to DB again

   Impact: Dead code, potential duplicate writes
   Fix: Remove docker_info handling from storage

4. ⚠️  SYMBOLS end_line - DATA LOSS
   Location: Python extractor includes end_line, storage ignores it

   Extractor Returns:     {'name': 'foo', 'line': 10, 'end_line': 50, ...}
   Storage Uses:          symbol['name'], symbol['line'], symbol['col']
                          ↑ end_line NOT extracted!

   Impact: Function span data lost, CFG analysis incomplete
   Fix: Update storage to extract end_line

================================================================================
MEDIUM PRIORITY (P2)
================================================================================

5. 🔵 ROUTES - REDUNDANT FIELD
   Location: theauditor/indexer/extractors/javascript.py:829

   JavaScriptExtractor returns both 'file' and 'path' keys (same value)
   Impact: Minor inefficiency
   Fix: Remove redundant 'file' key

================================================================================
DATA FLOW ANALYSIS BY EXTRACTOR
================================================================================

PythonExtractor (python.py)
├─ ✅ imports          3-tuple (kind, module, line) → ❌ add_ref() mismatch
├─ ✅ routes           7-field dict → MATCH
├─ ✅ symbols          4-field dict → ⚠️ end_line ignored
├─ ✅ assignments      5-field dict → MATCH
├─ ✅ function_calls   6-field dict → MATCH
├─ ✅ returns          4-field dict → MATCH
├─ ✅ variable_usage   6-field dict → MATCH
├─ ✅ cfg              Complex nested → MATCH
├─ ✅ sql_queries      5-field dict → MATCH
└─ ✅ jwt_patterns     5-field dict → MATCH

JavaScriptExtractor (javascript.py)
├─ ✅ imports          3-tuple (kind, module, line) → ❌ add_ref() mismatch
├─ 🔵 routes           8-field dict (redundant 'file') → MATCH
├─ ✅ symbols          4-field dict → MATCH
├─ ✅ assignments      5-field dict → MATCH
├─ ✅ function_calls   6-field dict → MATCH
├─ ✅ returns          4-field dict → MATCH
├─ ✅ variable_usage   6-field dict → MATCH
├─ ✅ cfg              Complex nested → MATCH
├─ ✅ sql_queries      5-field dict → MATCH
├─ ✅ jwt_patterns     5-field dict → MATCH
├─ ❌ type_annotations 4-field dict → EXPECTS 13 FIELDS!
├─ ✅ react_components 7-field dict → MATCH
├─ ✅ react_hooks      9-field dict → MATCH
├─ ✅ vue_components   10-field dict → MATCH
├─ ✅ vue_hooks        7-field dict → MATCH
├─ ✅ vue_directives   6-field dict → MATCH
├─ ✅ vue_provide_inject 6-field dict → MATCH
├─ ✅ orm_queries      5-field dict → MATCH
└─ ✅ import_styles    6-field dict → MATCH

DockerExtractor (docker.py)
└─ ⚠️  Direct DB writes (add_docker_image) → docker_info dead code in storage

GenericExtractor (generic.py)
├─ ✅ Direct DB writes (add_compose_service) → Clean database-first pattern
├─ ✅ Direct DB writes (add_nginx_config) → Clean database-first pattern
└─ ✅ Direct DB writes (add_package_config) → Clean database-first pattern

SQLExtractor (sql.py)
└─ ✅ sql_objects      2-tuple (kind, name) → MATCH

JsonConfigExtractor (json_config.py)
├─ ✅ package_configs  11-field dict → MATCH
└─ ✅ lock_analysis    6-field dict → MATCH

PrismaExtractor (prisma.py)
└─ ✅ Direct DB writes (add_prisma_model) → Clean database-first pattern

================================================================================
FIELD-BY-FIELD MISMATCH MATRIX
================================================================================

Data Type         | Extractor Fields | Storage Expects | Status
------------------|------------------|-----------------|--------
imports           | 3 (kind,mod,line)| 4 params!       | ❌ MISMATCH
routes            | 7-8 dict fields  | 8 dict fields   | ✅ MATCH
symbols           | 4-5 dict fields  | 4 dict fields   | ⚠️  end_line lost
assignments       | 5 dict fields    | 5 dict fields   | ✅ MATCH
function_calls    | 6 dict fields    | 6 dict fields   | ✅ MATCH
returns           | 4 dict fields    | 4 dict fields   | ✅ MATCH
variable_usage    | 6 dict fields    | 6 dict fields   | ✅ MATCH
cfg               | nested structure | nested struct   | ✅ MATCH
sql_queries       | 5 dict fields    | 5 dict fields   | ✅ MATCH
jwt_patterns      | 5 dict fields    | 5 dict fields   | ✅ MATCH
type_annotations  | 4 dict fields    | 13 dict fields! | ❌ MISMATCH
docker_info       | (none)           | 6 dict fields   | ⚠️  DEAD CODE
react_components  | 7 dict fields    | 7 dict fields   | ✅ MATCH
react_hooks       | 9 dict fields    | 8 dict fields   | ✅ MATCH
vue_*             | various          | various         | ✅ MATCH
orm_queries       | 5 dict fields    | 5 dict fields   | ✅ MATCH
package_configs   | 11 dict fields   | 11 dict fields  | ✅ MATCH
lock_analysis     | 6 dict fields    | 6 dict fields   | ✅ MATCH
import_styles     | 6 dict fields    | 6 dict fields   | ✅ MATCH

================================================================================
VERIFICATION COMMANDS
================================================================================

# 1. Check if add_ref() accepts 4 parameters (it shouldn't):
grep -n "def add_ref" theauditor/indexer/database.py

# 2. Check how add_ref is called in storage:
grep -n "add_ref(" theauditor/indexer/__init__.py

# 3. Verify type annotation fields extracted:
grep -A 5 "type_annotations" theauditor/indexer/extractors/javascript.py

# 4. Check for docker_info handling:
grep -n "docker_info" theauditor/indexer/__init__.py

# 5. Test with debug mode:
THEAUDITOR_DEBUG=1 aud index --exclude-self

================================================================================
RECOMMENDED FIXES
================================================================================

Priority 1 (Immediate):
1. Fix add_ref() signature:

   # In theauditor/indexer/database.py:1045
   def add_ref(self, src: str, kind: str, value: str, line: Optional[int] = None):
       self.refs_batch.append((src, kind, value, line))

2. Enhance type annotation extraction in javascript.py to include:
   - column, is_any, is_unknown, is_generic
   - has_type_params, type_params, return_type, extends_type

Priority 2 (Short-term):
3. Remove docker_info handling from _store_extracted_data()
4. Extract and store end_line for function symbols
5. Remove redundant 'file' key from JS routes

Priority 3 (Long-term):
6. Create contract tests for extractor return structures
7. Add TypedDict definitions for all extractor contracts
8. Implement schema validation at extractor-storage boundary

================================================================================
TESTING CHECKLIST
================================================================================

After fixes, verify:
[ ] Query refs table: SELECT * FROM refs WHERE line IS NOT NULL
[ ] Query type_annotations: Check all 13 columns have data
[ ] Query symbols: Check end_line column exists and populated
[ ] Run full index on test project with no errors
[ ] Verify no duplicate docker_image records
[ ] Check all extractors with THEAUDITOR_DEBUG=1

================================================================================
End of Summary
================================================================================
